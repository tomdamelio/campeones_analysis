### ‚úÖ **Lunes 26/05 y Martes 27/05**

**Tarea:** Desarrollo de script de conversi√≥n XDF a BIDS

- [x] Crear script de prueba `test_read_xdf.py` para un participante
  - Implementar conversi√≥n de archivo XDF a formato BIDS
  - Manejar datos de EEG y joystick
  - Generar archivos de metadatos BIDS
  - Guardar en estructura BIDS compliant

---

### üìÖ **Mi√©rcoles 28/05**

**Tarea:** Limpiar y documentario cambios (45 min, max)

- [x] Hacer limpieza del repositorio
  - e.g. hay muchos archivos en tests que tal vez pueden volar, o revisar
- [x] Pushear los cambios que hice hasta ahora

---

### üìÖ **Jueves 29/05**

- [x] Revisar y corregir errores del CI en GitHub
  - Identificar y solucionar el problema que caus√≥ el fallo
  - Verificar que todos los checks pasen correctamente
  - Confirmar que el PR est√° listo para merge

**Tarea:** Completar desarrollo de script de conversi√≥n (2 hs, max)

- [ ] Revisar a fondo el script `test_read_xdf.py`
  - Entender paso a paso el proceso de conversi√≥n
  - Identificar y corregir posibles errores
  - Documentar el flujo de trabajo
- [ ] Verificar el output generado
  - Confirmar que la estructura BIDS es correcta
  - Validar la integridad de los datos convertidos
- [ ] Implementar `read_xdf.py` en `physio` (a partir de `test_read_xdf.py` en `./test`)
  - Migrar funcionalidad de test a script principal
  - Adaptar para procesar m√∫ltiples participantes
  - Agregar opciones para procesar sujetos espec√≠ficos o todos
- [ ] Documentar el script y su uso
  - Agregar docstrings y comentarios
  - Crear README con instrucciones de uso
  - Documentar par√°metros de l√≠nea de comandos


**Tarea:** Inspecci√≥n de datos fisiol√≥gicos y marcas (3 hs)

- [ ] Verificar marcas (audio y fotosensor)
  - Confirmar inicio/fin correcto de los est√≠mulos
- [ ] Revisar trayectorias de anotaciones continuas
- [ ] Cargar y visualizar datos perif√©ricos (ECG, respiraci√≥n, etc.) en 1 sujeto
  - Anotar calidad, artefactos, problemas
- [ ] Documentar hallazgos del sujeto

---



**Tarea:** Trabajar especificamente sobre las marcas de los participantes

- [ ] Inspecci√≥n visual de marcas en un participante
  - Localizar las marcas de inicio y fin de registro.
    Si no esta, fijarme si las puedo recuperar del raw, porque estas marcas deberian estar
  - Cargar y visualizar marcas de audio y photosensor
  - Documentar observaciones iniciales
- [ ] An√°lisis sistem√°tico de marcas
  - Revisar scripts proporcionados por Nico
  - Identificar patrones en las marcas (audio/photosensor)
  - Proponer reglas generales para el matching
- [ ] Pensar proximos pasos con Jero

---

### üìÖ **Viernes 30/05**

**Tarea:** Extender inspecci√≥n a todos los sujetos

- [ ] Repetir procedimiento de inspecci√≥n en los sujetos restantes
  - Fisiolog√≠a
  - Marcas
- [ ] Cargar pipeline EEG en un sujeto
  - Verificar funcionamiento b√°sico sin errores
  - Anotar requerimientos de ajustes



Semana que viene -> First Data Pipeline (EEG Preprocessing)

- [ ] Crear un script reproducible de preprocesamiento EEG para un participante:
    1. Leer datos BIDS de un sujeto/sesi√≥n/tarea.
    2. Filtrar (bandpass) y notch.
    3. Detecci√≥n autom√°tica y visual de canales ruidosos.
    4. Segmentar en epochs seg√∫n eventos.
    5. Rechazo autom√°tico y manual de epochs (AutoReject).
    6. ICA + clasificaci√≥n autom√°tica de componentes (ICLabel).
    7. Interpolaci√≥n de canales malos y rereferencia.
    8. Guardar epochs preprocesados y reporte HTML en `data/derivatives/`.
    9. Loggear todos los pasos y par√°metros en JSON.
- [ ] Crear una **nox session** (`nox -s preproc_demo`) que ejecute el script.
- [ ] Agregar un **DVC stage** en `dvc.yaml` para este pipeline y pushear artefactos.
