---
description:
globs:
alwaysApply: true
---
# .cursor/rules/env.mdc
---
description: "Reproducible environments with micromamba + pyproject"
alwaysApply: true
---
## Environment

### Rules
- One micromamba env per project; lock with **conda-lock** (`conda-lock.yml`).
- Pure-Python dependencies declared in **pyproject.toml** `[project.optional-dependencies]`.
- Dev tools (ruff, pyright, pytest, nox, pre-commit, mkdocs, vulture, commitlint) declared in the `dev` group of pyproject.toml.
- Pin critical versions; otherwise use compatible spec (`numpy >=1.26,<2.0`).
- All CLI scripts print `git rev-parse --short HEAD` on start for traceability.
- Seed randomness (`--seed`, env VAR or config file) for numpy, torch, random.
- When adding or updating dependencies, always edit `environment.yml` first.
    - After any change, run `conda-lock lock --mamba` to regenerate `conda-lock.yml`.
    - Automate this with a pre-commit hook or CI job to ensure `conda-lock.yml` is always in sync with `environment.yml`.
- All dev tools and quality gates must be runnable via Nox sessions and pre-commit hooks.
- Document new dependencies and rationale in commit messages for traceability.
- **When installing a new library:**
    - During development, you may install new dependencies with `pip install` for speed, but you must add them to `environment.yml` immediately.
    - Regenerate the lockfile (`conda-lock.yml`) periodically (e.g., at project milestones, before releases, or after a batch of changes).
    - All changes to dependencies must be documented in the `CHANGELOG.md` and in commit messages.
    - Add to `pyproject.toml` `[project.optional-dependencies]` if it is a pure Python dev tool or only needed for development/automation.

### Checklist
- [ ] `micromamba create -n env -f conda-lock.yml` reproduces the build.
- [ ] Every persisted model/file embeds the commit hash in metadata.
- [ ] `pip install -e .[dev]` installs all required dev tools.
- [ ] `pre-commit install` and `nox -s lint type_check tests` run without errors.

## Dependency Management
- Use micromamba for environment management
- Keep environment.yml updated with all dependencies
- Use conda-forge channel as default
- Install new dependencies using `micromamba install` during development
- Only update conda-lock when reaching a stable version
- Document all dependency changes in CHANGELOG.md

## Environment Setup
- Use Python 3.11
- Keep environment.yml and conda-lock.yml in sync
- Use conda-lock for reproducible environments
